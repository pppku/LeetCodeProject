/* question

给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个元素 a，b，c 和 d ，使得 a + b + c + d 的值与 target 相等？找出所有满足条件且不重复的四元组。

注意：

答案中不可以包含重复的四元组。

示例：

给定数组 nums = [1, 0, -1, 0, -2, 2]，和 target = 0。

满足要求的四元组集合为：
[
  [-1,  0, 0, 1],
  [-2, -1, 1, 2],
  [-2,  0, 0, 2]
]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/4sum
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

*/

/* solution

class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        int size = nums.size();
        int now, low, high;
        int sum;
        vector<vector<int>> result;


        if(size < 4)
            return result;
    
        sort(nums.begin(), nums.end());


        for(int i = 0; i < size - 3; ++i)
        {
            if(i > 0 && nums[i] == nums[i - 1]) continue;
            for(now = i + 1; now < size - 2; ++now)
            {
                if(now > i + 1 && nums[now] == nums[now - 1]) continue;
                low = now + 1;
                high = size - 1;
                

                while(low < high)
                {
                    sum = nums[i] + nums[now] + nums[low] + nums[high];
                    if(sum == target)
                    {
                        vector<int> tem;
                        tem.push_back(nums[i]);
                        tem.push_back(nums[now]);
                        tem.push_back(nums[low]);
                        tem.push_back(nums[high]);
                        result.push_back(tem);
                        low++;
                        while(nums[low] == nums[low - 1] && low < high) low++;
                    }
                    else if(sum < target)
                    {
                        low++;
                        while(nums[low] == nums[low - 1] && low < high) low++;
                    } 
                    else
                    {
                        high--;
                        while(nums[high] == nums[high + 1] && low < high) high--;
                    } 
                }

            }
        }
        return result;
    }
};

*/
