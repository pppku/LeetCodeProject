/* question

实现获取下一个排列的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。

如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。

必须原地修改，只允许使用额外常数空间。

以下是一些例子，输入位于左侧列，其相应输出位于右侧列。
1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/next-permutation
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

*/


/* solution

class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        // 从后往前找到第一个前边小于后边的值--记为较小值
        int i = nums.size() - 2;

        while(i >= 0 && nums[i] >= nums[i + 1]) i--;


        // 从后往前找到第一个大于较小值的数--记为较大值
        if(i >= 0)
        {
            int j = nums.size() - 1;
            while(j >= 0 && nums[i] >= nums[j]) j--;

            // 交换最大最小值
            swap(nums[i], nums[j]);
        }

        // 需将较小值位置，后面的值调整为最小值
        // 由于后面的值是降序，因此翻转即可
        reverse(nums.begin() + i + 1, nums.end());

    }
};

*/
