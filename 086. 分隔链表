/* question

给定一个链表和一个特定值 x，对链表进行分隔，使得所有小于 x 的节点都在大于或等于 x 的节点之前。

你应当保留两个分区中每个节点的初始相对位置。

 

示例:

输入: head = 1->4->3->2->5->2, x = 3
输出: 1->2->2->4->3->5

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/partition-list
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

*/


/* solution

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
        if(head == nullptr) return nullptr;

        // 创建大节点链表
        ListNode* bigger = new ListNode(-1);
        ListNode* now = bigger;

        // 遍历链表，大的放到大节点链表里
        // 1.去掉头删的情况
        while(head && head->val >= x)
        {
            now->next = head;
            now = head;
            head = head->next;
            now->next = nullptr;
        }
        if(head == nullptr) return bigger->next;

        // 2.解决中间删除节点的情况
        ListNode* pre = head;
        ListNode* cur = head->next;
        while(cur)
        {
            if(cur->val >= x)
            {
                now->next = cur;
                now = cur;
                pre->next = cur->next;
                cur = cur->next;
                now->next = nullptr;
            }
            else
            {
                cur = cur->next;
                pre = pre->next;
            }
        }


        pre->next = bigger->next;
        return head;
        
    }
};

*/
