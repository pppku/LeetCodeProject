/* question

给定一个二叉树，返回其节点值的锯齿形层序遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。

例如：
给定二叉树 [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7

返回锯齿形层序遍历如下：

[
  [3],
  [20,9],
  [15,7]
]


来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

*/


/* solution

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        
        queue<TreeNode*> myque;
        deque<int> temque;

        myque.push(root);

        vector<vector<int>> res;
        if(root == nullptr) return res;
        int left = 1;

        while(!myque.empty())
        {
            
            int size = myque.size();
            for(int i = 0; i < size; ++i)
            {
                TreeNode* temp = myque.front();
                temque.push_back(temp->val);
                myque.pop();
                if(temp->right) myque.push(temp->right);
                if(temp->left) myque.push(temp->left);

            }
            if(left)
            {
                vector<int> vec;
                left = 0;
                while(!temque.empty())
                {
                    vec.emplace_back(temque.back());
                    temque.pop_back();
                }
                res.emplace_back(vec);
            }
            else
            {
                vector<int> vec;
                left = 1;
                while(!temque.empty())
                {
                    vec.emplace_back(temque.front());
                    temque.pop_front();
                }
                res.emplace_back(vec);
            }
            
        }

        return res;
    }
};

*/
