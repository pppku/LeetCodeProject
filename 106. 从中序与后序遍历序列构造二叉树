/* question

根据一棵树的中序遍历与后序遍历构造二叉树。

注意:
你可以假设树中没有重复的元素。

例如，给出

中序遍历 inorder = [9,3,15,20,7]
后序遍历 postorder = [9,15,7,20,3]
返回如下的二叉树：

    3
   / \
  9  20
    /  \
   15   7

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

*/


/* solution

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {

    
public:
    unordered_map<int, int> idx_map;
    int post_idx;

    TreeNode* createTree(int left, int right, vector<int>& inorder, vector<int>& postorder)
    {
        if(left > right) return nullptr;

        // 后序中取值
        int value = postorder[post_idx];

        // 创建新节点
        TreeNode* cur = new TreeNode(value);

        // post_idx前移
        post_idx--;

        // 构造左右子树
        // 必须先右后左
        cur->right = createTree(idx_map[value] + 1, right, inorder, postorder);
        cur->left = createTree(left, idx_map[value] - 1, inorder, postorder);
        


        return cur;
    }


    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        
        int tem = 0;
        for(int i : inorder)
        {
            idx_map[i] = tem++;
        }

        post_idx = postorder.size() - 1;

        return createTree(0, inorder.size() - 1, inorder, postorder);
    }
};

*/
