/* question

给你一个整数数组 nums ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。

 

示例 1:

输入: [2,3,-2,4]
输出: 6
解释: 子数组 [2,3] 有最大乘积 6。
示例 2:

输入: [-2,0,-1]
输出: 0
解释: 结果不能为 2, 因为 [-2,-1] 不是子数组。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/maximum-product-subarray
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

*/

/* solution

class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int n = nums.size();
        if(n == 1) return nums[0];

        vector<int> maxdp(n);
        vector<int> mindp(n);

        maxdp[0] = nums[0];
        mindp[0] = nums[0];

        for(int i = 1; i < n; ++i)
        {
            maxdp[i] = max(mindp[i - 1] * nums[i], max(nums[i], maxdp[i - 1] * nums[i]));
            mindp[i] = min(mindp[i - 1] * nums[i], min(nums[i], maxdp[i - 1] * nums[i]));
         }

        return *max_element(maxdp.begin(), maxdp.end());
    }
};

*/
