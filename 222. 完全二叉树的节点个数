/* question

给出一个完全二叉树，求出该树的节点个数。

说明：

完全二叉树的定义如下：在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置。若最底层为第 h 层，则该层包含 1~ 2h 个节点。

示例:

输入: 
    1
   / \
  2   3
 / \  /
4  5 6

输出: 6

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/count-complete-tree-nodes
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

*/


/* solution

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int countdepth(TreeNode* cur)
    {   

        int depth = 0;
        while(cur != nullptr)
        {
            depth++;
            cur = cur->left;
        }

        return depth;
    }
    int countNodes(TreeNode* root) {
        if(root == nullptr) return 0;

        int leftdepth = countdepth(root->left);
        int rightdepth = countdepth(root->right);

        // 左子树深度=右子树深度 说明左子树是满的
        if(leftdepth == rightdepth)
        {
            return (1 << leftdepth) + countNodes(root->right);
        }
        // 左子树深度>右子树深度 说明右子树是满的
        else
        {
            return (1 << rightdepth) + countNodes(root->left);
        }

    }
};

*/
