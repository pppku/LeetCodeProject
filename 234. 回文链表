/* question

请判断一个链表是否为回文链表。

示例 1:

输入: 1->2
输出: false
示例 2:

输入: 1->2->2->1
输出: true
进阶：
你能否用 O(n) 时间复杂度和 O(1) 空间复杂度解决此题？

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/palindrome-linked-list
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

*/


/* solution

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(head == NULL) return true;

        // 1.找到链表中点
        int size = 0;
        ListNode* tem = head;

        while(tem)
        {
            size++;
            tem = tem->next;
        }

        if(size == 1) return true;

        ListNode* head2 = head;
        for(int i = 0; i < (size + 1) / 2; ++i) head2 = head2->next;


        // 2.翻转后半段
        ListNode* pre = NULL;
        while(head2->next)
        {
            ListNode* nxt = head2->next;
            head2->next = pre;
            pre = head2;
            head2 = nxt;
        }
        head2->next = pre;

        // 3.比对
        while(head2)
        {
            if(head2->val != head->val) return false;

            head = head->next;
            head2 = head2->next;
        }

        return true;

    }
};

*/
