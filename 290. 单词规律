/* question

给定一种规律 pattern 和一个字符串 str ，判断 str 是否遵循相同的规律。

这里的 遵循 指完全匹配，例如， pattern 里的每个字母和字符串 str 中的每个非空单词之间存在着双向连接的对应规律。

示例1:

输入: pattern = "abba", str = "dog cat cat dog"
输出: true
示例 2:

输入:pattern = "abba", str = "dog cat cat fish"
输出: false
示例 3:

输入: pattern = "aaaa", str = "dog cat cat dog"
输出: false
示例 4:

输入: pattern = "abba", str = "dog dog dog dog"
输出: false
说明:
你可以假设 pattern 只包含小写字母， str 包含了由单个空格分隔的小写字母。    



来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/word-pattern
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

*/


/* solution

class Solution {
public:
    bool wordPattern(string pattern, string s) {
        map<char, string> mp;
        set<string> tset;
        vector<string> news;

        // 分割字符串s
        string tem = "";
        for(char i : s)
        {
            if(i != ' ') tem += i;
            else
            {
                news.emplace_back(tem);
                tem = "";
            }
        }
        if(tem != "") news.emplace_back(tem);

        if(pattern.size() != news.size()) return false;
        int size = pattern.size();

        // 利用map和set匹配
        for(int i = 0; i < size; ++i)
        {
            // map中没有key的情况
            if(mp.find(pattern[i]) == mp.end())
            {
                // set中不存在
                if(tset.find(news[i]) == tset.end())
                {
                    tset.insert(news[i]);
                    mp[pattern[i]] = news[i];
                } 
                // set中已存在
                else return false;
            }
            // map中已有key
            else
            {
                if(mp[pattern[i]] != news[i]) return false;
            }
        }

        return true;

    }
};

*/
