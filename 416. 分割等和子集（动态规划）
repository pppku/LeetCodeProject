/* question

给定一个只包含正整数的非空数组。是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。

注意:

每个数组中的元素不会超过 100
数组的大小不会超过 200
示例 1:

输入: [1, 5, 11, 5]

输出: true

解释: 数组可以分割成 [1, 5, 5] 和 [11].
 

示例 2:

输入: [1, 2, 3, 5]

输出: false

解释: 数组不能分割成两个元素和相等的子集.

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/partition-equal-subset-sum
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

*/


/* solution

class Solution {
public:
    bool canPartition(vector<int>& nums) {
        if(nums.size() < 2) return false;

        int sum = 0;
        int maxnum = -1;

        for(int i : nums)
        {
            if(i > maxnum) maxnum = i;
            sum += i;
        }

        if(sum % 2 == 1) return false;
        if(maxnum > sum / 2) return false;

        int target = sum / 2;

        // dp[i][j] : [0, i] 区间内是否可以加和为j
        // 创建二维数组dp，包含n 行target + 1 列，其中dp[i][j] 
        // 表示从数组的[0,i] 下标范围内选取若干个正整数（可以是 0 个），是否存在一种选取方案使得被选取的正整数的和
        // 等于j。初始时dp中的全部元素都是false。


        int n = nums.size();
        vector<vector<int>> dp(n, vector<int>(target + 1, 0));

        // 确定边界值
        // j = 0 时都是true
        for (int i = 0; i < n; i++) dp[i][0] = true;
        
        // i = 0 时 只有nums[0]可选，因此dp[0][nums[0]] = true
        dp[0][nums[0]] = true;


        for (int i = 1; i < n; i++) 
        {
            int num = nums[i];
            for (int j = 1; j <= target; j++) 
            {
                // j >= num 表示nums[i]可选可不选
                if (j >= num) dp[i][j] = dp[i - 1][j] | dp[i - 1][j - num];
                // j < num 表示nums[i]一定不选
                else dp[i][j] = dp[i - 1][j];
            }
        }

        return dp[n - 1][target];

    }
};

*/
