/* question

*/

/* solution
class Solution {
public:
    int ishuiwen(string tem)
    {
        int i;
        int slength = tem.length();
        int result = 1;
            
        for(i = 0; i < (slength + 1) / 2; ++i)
        {
            if(tem[i] != tem[slength - i - 1])
            {
                result = 0;
                break;
            }
        }
        
        return result;
    }
    
    string longestPalindrome(string s) {
        int i, j, tem;
        int slength = s.length();
        
        int nowlength = 1;
        string result = s.substr(0, 1);
        string temp;
        
        for(i = 0; i < slength - 1; ++i)
            for(j = i; j < slength; ++j)
            {
                temp = s.substr(i, j + 1);
                
                if(ishuiwen(temp) == 1)
                {
                    if(temp.length() > nowlength)
                    {
                        nowlength = temp.length();
                        result = temp;
                    }
                }
                

            }
        
        return result;
    }
};
*/
